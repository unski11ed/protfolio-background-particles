"use strict";function _interopDefault(t){return t&&"object"==typeof t&&"default"in t?t.default:t}var ElementType,EventEmitter=_interopDefault(require("eventemitter3")),FpsThrottler=require("fps-throttler"),lodash=require("lodash"),eases=require("eases"),eases__default=_interopDefault(eases);class Screen{constructor(t,e){this.canvasElement=t,this.screenSize=e,this.events=new EventEmitter,this.handleCanvasResize=()=>{const t=this.canvasElement.getBoundingClientRect();this.canvasElement.width=t.width,this.canvasElement.height=t.height,this.events.emit("screenResized")},this.canvasContext=t.getContext("2d"),"undefined"!=typeof window&&window.addEventListener("resize",this.handleCanvasResize),this.handleCanvasResize()}prepareScene(){this.canvasContext.fillStyle="#000",this.canvasContext.fillRect(0,0,this.screenSize.width,this.screenSize.height)}destroy(){"undefined"!=typeof window&&window.removeEventListener("resize",this.handleCanvasResize)}}class ScreenSize{constructor(t){this.canvasElement=t}get width(){return this.canvasElement.width}get height(){return this.canvasElement.height}}!function(t){t.Particle="element--particle",t.Ripple="element--ripple"}(ElementType||(ElementType={}));class Particle{constructor(t,e,i=.1){this.x=t,this.y=e,this.speed=i,this.type=ElementType.Particle,this.size=1,this.opacity=.5,this.vX=0,this.vY=0}}class Particles{constructor(t,e){this.screenSize=t,this.particleBuilders=e,this.particles=[]}create(t=1){for(let e=0;e<t;e++){const t=new Particle(Math.random()*this.screenSize.width,Math.random()*this.screenSize.height);for(const e of this.particleBuilders)e.build(t);this.particles.push(t)}}destroy(t){const e=this.particles.indexOf(t);this.particles.splice(e,1)}}class RendererBase{constructor(t){this.canvasElement=t,this.canvasContext=t.getContext("2d")}}function drawCircle(t,e){t.beginPath(),t.fillStyle=e.color,t.arc(e.x,e.y,e.radius<0?0:e.radius,0,2*Math.PI),t.fill()}function distance(t,e){return Math.sqrt(Math.pow(e.x-t.x,2)+Math.pow(e.y-t.y,2))}function rippleLength(t,e){const i=e.x>t.width/2?e.x:t.width-e.x,n=e.y>t.height/2?e.y:t.height-e.y;return Math.sqrt(Math.pow(i,2)+Math.pow(n,2))}function createDebouncer(t=100){return e=>{clearTimeout(0),setTimeout(e,t)}}const merge=(t,e)=>{for(let i of Object.keys(e))e[i]instanceof Object&&Object.assign(e[i],merge(t[i],e[i]));return Object.assign(t||{},e),t},PARTICLE_COLOR="#fff";class ParticleRenderer extends RendererBase{render(t){for(const e of t){const t=this.canvasContext.globalAlpha;this.canvasContext.globalAlpha=e.opacity,drawCircle(this.canvasContext,{color:PARTICLE_COLOR,x:e.x,y:e.y,radius:e.size/2}),this.canvasContext.globalAlpha=t}}}class GravityRectParticleBuilder{constructor(t){this.gravitySource=t}build(t){const e=this.gravitySource.generatePointWithinRegion(),i=Math.sqrt(Math.pow(e.x-t.x,2)+Math.pow(e.y-t.y,2));t.vX=(t.x-e.x)/i,t.vY=(t.y-e.y)/i}}class FadeInParticleBuilder{constructor(t,e={}){this.propertyAnimation=t,this.options={spawnAnimationEasing:"cubicOut",spawnAnimationDuration:300,minSize:1,maxSize:4,minOpacity:.01,maxOpacity:.7,minSpeed:.001,maxSpeed:.1},Object.assign(this.options,e)}build(t){const e=lodash.random(this.options.minOpacity,this.options.maxOpacity,!0),i=lodash.random(this.options.minSize,this.options.maxSize);t.speed=lodash.random(this.options.minSpeed,this.options.maxSpeed,!0),this.propertyAnimation.animate(t,{opacity:[0,e],size:[0,i]},{functionName:this.options.spawnAnimationEasing,duration:this.options.spawnAnimationDuration})}}class GravitySource{constructor(t){this.gravityRegion=t}get region(){return this.gravityRegion}get center(){return{x:this.region.x+this.region.width/2,y:this.region.y+this.region.height/2}}setRegion(t){this.gravityRegion=t}generatePointWithinRegion(){return{x:this.gravityRegion.x+Math.random()*this.gravityRegion.width,y:this.gravityRegion.y+Math.random()*this.gravityRegion.height}}}const createMovementParticleModifier=t=>(t,e)=>{t.x-=t.vX*t.speed,t.y-=t.vY*t.speed},createInBoundParticleRecreator=t=>(e,i)=>{const{bounds:n,particles:s}=t;(e.x>n.width||e.x<0||e.y>n.height||e.y<0)&&(s.destroy(e),s.create(1))},createParticleToGravityModifier=t=>(e,i)=>{const n=Object.assign({minOpacity:.1,maxOpacity:.9,easing:"cubicIn"},t.particleConfig),{gravitySource:s,screenSize:r}=t,a=distance(e,s.center),o=rippleLength(r,s.center),c=(o-a)/o,h=n.minOpacity+eases__default[n.easing](c)*(n.maxOpacity-n.minOpacity);e.opacity=h};class ParticleUpdater{constructor(t,e){this.modifiers=t,this.particles=e}update(t){for(const e of this.particles.particles)for(const i of this.modifiers)i(e,t)}}const DefaultAnimationOptions={duration:200,functionName:"linear"};class PropertyAnimation{constructor(){this.animationStates=[]}animate(t,e,i={}){const n=Object.assign({},DefaultAnimationOptions,i);if("function"!=typeof eases[n.functionName])throw Error(`Provided easing function name ${n.functionName} is not recognized.`);return new Promise(i=>{const s={element:t,startTime:Date.now(),params:e,options:n,finishResolver:i};this.animationStates.push(s)})}finishAnimation(t){const e=this.animationStates.find(e=>e.element===t);if(e){for(const i of Object.keys(e.params))t[i]=e.params[i][1];const i=this.animationStates.indexOf(e);this.animationStates.splice(i,1),e.finishResolver(e.element)}}update(t){for(const e of this.animationStates){const{element:i,startTime:n,params:s,options:r,finishResolver:a}=e;if(t>=n+r.duration)this.finishAnimation(i);else for(const e of Object.keys(s)){const[a,o]=s[e],c=(t-n)/r.duration,h=a+eases[r.functionName](c)*(o-a);i[e]=h}}}}function __awaiter(t,e,i,n){return new(i||(i=Promise))(function(s,r){function a(t){try{c(n.next(t))}catch(t){r(t)}}function o(t){try{c(n.throw(t))}catch(t){r(t)}}function c(t){t.done?s(t.value):new i(function(e){e(t.value)}).then(a,o)}c((n=n.apply(t,e||[])).next())})}class RippleGenerator{constructor(t,e,i,n){this.particles=e,this.screenSize=i,this.propertyAnimation=n,this.startTime=0,this.rippleOrigin={x:0,y:0},this.animatedParticles=[],this.params={rippleAnimationDuration:1e3,rippleAnimationEasing:"cubicOut",particleAnimationDuration:75,particleAnimationEasing:"cubicOut",targetParticleOpacity:.8,targetParticleSize:4},Object.assign(this.params,t)}trigger(t){this.startTime=Date.now(),this.rippleOrigin=t,this.animatedParticles.length=0;for(const t of this.particles.particles)this.propertyAnimation.finishAnimation(t)}update(t){const{rippleAnimationDuration:e,rippleAnimationEasing:i,particleAnimationDuration:n,particleAnimationEasing:s,targetParticleOpacity:r,targetParticleSize:a}=this.params;if(this.startTime+e>t){const o=(t-this.startTime)/e,c=eases__default[i](o)*rippleLength(this.screenSize,this.rippleOrigin);this.particles.particles.forEach(t=>__awaiter(this,void 0,void 0,function*(){if(this.animatedParticles.indexOf(t)<0){if(distance(t,this.rippleOrigin)<=c){const e=t.opacity,i=t.size,o={duration:n,easing:s};this.animatedParticles.push(t),yield this.propertyAnimation.animate(t,{opacity:[t.opacity,r],size:[t.size,a]},o),this.propertyAnimation.animate(t,{opacity:[t.opacity,e],size:[t.size,i]},o)}}}))}}}class RippleTexture{constructor(t,e,i){this.params=t,this.screenSize=e,this.gravitySource=i,this.type=ElementType.Ripple,this.x=0,this.y=0,this.canvasElement=null,this.canvasContext=null,this.startTime=0,this.originPoint={x:0,y:0},this.nextColor="#fff",this.animationInProgress=!1,"undefined"!=typeof document&&(this.canvasElement=document.createElement("canvas"),this.updateSize(),this.canvasContext=this.canvasElement.getContext("2d"),this.currentColor=t.initialColor,this.fillTexture({color:this.currentColor}))}get texture(){return this.canvasElement}updateSize(){this.canvasElement.width=this.screenSize.width,this.canvasElement.height=this.screenSize.height}trigger(t,e){this.startTime=Date.now(),this.animationInProgress=!0,this.currentColor=this.nextColor,this.nextColor=t,this.originPoint=e}update(t){const{duration:e,easingFunc:i}=this.params;if(this.animationInProgress)if(this.startTime+e>t){const n=(t-this.startTime)/e,s=eases__default[i](n)*rippleLength(this.screenSize,this.originPoint);this.generateTexture(s)}else this.fillTexture({color:this.nextColor}),this.animationInProgress=!1}fillTexture(t){this.canvasContext.fillStyle=t.color,this.canvasContext.fillRect(0,0,this.screenSize.width,this.screenSize.height)}generateTexture(t){const{waveLength:e}=this.params;this.fillTexture({color:this.currentColor});const i=e/2,n=this.canvasContext.createRadialGradient(this.originPoint.x,this.originPoint.y,t-i<0?0:t-i,this.originPoint.x,this.originPoint.y,t+e);n.addColorStop(0,this.nextColor),n.addColorStop(.2,"#fff"),n.addColorStop(.8,"#fff"),n.addColorStop(1,this.currentColor),drawCircle(this.canvasContext,Object.assign({},this.originPoint,{radius:t+i,color:n}))}}class RippleRenderer extends RendererBase{render(t){const e=this.canvasContext.globalCompositeOperation;this.canvasContext.globalCompositeOperation="multiply",this.canvasContext.drawImage(t.texture,t.x,t.y),this.canvasContext.globalCompositeOperation=e}}const defaultConfig={gravitySourceRect:{x:.75,y:.75,width:100,height:100},particleConfig:{minSize:1,maxSize:4,minOpacity:.1,maxOpacity:.9,minSpeed:.001,maxSpeed:.1,gravityOpacityFunc:"cubicOut"},rippleConfig:{rippleAnimationDuration:1e3,rippleAnimationEasing:"cubicOut",waveLength:300},initialColor:"hotpink",fpsLimit:30};class index{constructor(t,e){this.events=new EventEmitter;const i=this.options=merge(defaultConfig,e),n=this.screenSize=new ScreenSize(t),s=this.screen=new Screen(t,n);this.particleRenderer=new ParticleRenderer(t),this.rippleRenderer=new RippleRenderer(t);const r=this.propertyAnimation=new PropertyAnimation,a=this.gravitySource=new GravitySource(Object.assign({},i.gravitySourceRect,{x:i.gravitySourceRect.x*n.width,y:i.gravitySourceRect.x*n.height})),o=new GravityRectParticleBuilder(a),c=new FadeInParticleBuilder(r,i.particleConfig),h=this.particles=new Particles(n,[o,c]),l=createMovementParticleModifier(),p=createInBoundParticleRecreator({bounds:n,particles:h}),d=createParticleToGravityModifier({screenSize:n,gravitySource:a,particleConfig:e.particleConfig});this.particleUpdater=new ParticleUpdater([l,p,d],h),this.rippleGenerator=new RippleGenerator(i.rippleConfig,h,n,r),this.rippleTexture=new RippleTexture({duration:i.rippleConfig.rippleAnimationDuration,easingFunc:i.rippleConfig.rippleAnimationEasing,waveLength:i.rippleConfig.waveLength,initialColor:i.initialColor},n,a),this.fpsThrottler=new FpsThrottler(this.loop.bind(this),e.fpsLimit);const u=createDebouncer(300);s.events.on("screenResized",()=>{u(this.reset.bind(this))}),this.fpsThrottler.start()}createParticles(t){this.particles.create(t)}trigger(t,e){this.rippleGenerator.trigger(t),this.rippleTexture.trigger(e,t)}destroy(){this.fpsThrottler.stop(),this.screen.destroy()}reset(){this.rippleTexture.updateSize(),this.gravitySource.setRegion(Object.assign({},this.options.gravitySourceRect,{x:this.options.gravitySourceRect.x*this.screenSize.width,y:this.options.gravitySourceRect.x*this.screenSize.height}));for(const t of this.particles.particles)this.particles.destroy(t);this.events.emit("reset")}loop(){const t=Date.now();this.screen.prepareScene(),this.particleUpdater.update(t),this.rippleTexture.update(t),this.rippleGenerator.update(t),this.propertyAnimation.update(t),this.particleRenderer.render(this.particles.particles),this.rippleRenderer.render(this.rippleTexture)}}module.exports=index;
